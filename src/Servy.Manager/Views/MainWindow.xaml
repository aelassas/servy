<Window x:Class="Servy.Manager.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Servy.Manager"
        xmlns:resx="clr-namespace:Servy.Manager.Resources"
        xmlns:views="clr-namespace:Servy.Manager.Views"
        xmlns:vm="clr-namespace:Servy.Manager.ViewModels"
        xmlns:managerConverters="clr-namespace:Servy.Manager.Converters"
        xmlns:converters="clr-namespace:Servy.UI.Converters;assembly=Servy.UI"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        Title="Servy Manager" Height="600" Width="1000"
        Loaded="Window_Loaded"
        PreviewKeyDown="Window_PreviewKeyDown"
        MouseDown="Window_MouseDown"
        >

    <Window.Resources>
        <!-- Converters -->
        <managerConverters:StartupTypeConverter x:Key="StartupTypeConverter"/>
        <managerConverters:StatusConverter x:Key="StatusConverter"/>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibility" />
    </Window.Resources>

    <DockPanel>
        <!-- Menu Bar -->
        <Menu DockPanel.Dock="Top" Height="28">
            <!--Import-->
            <MenuItem Header="{x:Static resx:Strings.Menu_Import}">
                <MenuItem Header="{x:Static resx:Strings.Menu_ImportXml}" Command="{Binding ImportXmlCommand}"/>
                <MenuItem Header="{x:Static resx:Strings.Menu_ImportJson}" Command="{Binding ImportJsonCommand}"/>
            </MenuItem>

            <!--Configurator-->
            <MenuItem Header="{x:Static resx:Strings.Menu_Config}" Click="Menu_ConfigClik" IsEnabled="{Binding IsConfiguratorEnabled}"/>

            <!-- Help Menu -->
            <MenuItem Header="{x:Static resx:Strings.Menu_Help}">
                <MenuItem Header="{x:Static resx:Strings.Menu_Doc}" Command="{Binding OpenDocumentationCommand}"/>
                <MenuItem Header="{x:Static resx:Strings.Menu_CheckUpdates}" Command="{Binding CheckUpdatesCommand}"/>
                <MenuItem Header="{x:Static resx:Strings.Menu_About}" Command="{Binding OpenAboutDialogCommand}"/>
            </MenuItem>
        </Menu>

        <TabControl x:Name="MainTabControl" Grid.Row="0" SelectionChanged="MainTabControl_SelectionChanged">

            <!--Services Tab-->
            <TabItem x:Name="MainTab" Header="{x:Static resx:Strings.Label_ServicesTab}">
                <Grid Margin="10">
                    <Grid.RowDefinitions>
                        <!-- Search panel -->
                        <RowDefinition Height="Auto"/>
                        <!-- DataGrid -->
                        <RowDefinition Height="*"/>
                        <!-- Footer -->
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Search Panel -->
                    <Grid Grid.Row="0" Margin="0,0,0,10" VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <!-- Search box -->
                            <ColumnDefinition Width="Auto"/>
                            <!-- Button -->
                            <ColumnDefinition Width="Auto"/>
                            <!-- Spacer -->
                            <ColumnDefinition Width="*"/>
                            <!-- Right aligned text -->
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBox x:Name="SearchTextBox" Grid.Column="0"
                         Width="200" Height="24" Margin="0,0,5,0"  
                         Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" 
                         KeyDown="SearchTextBox_KeyDown" />

                        <Button Grid.Column="1"
                        Content="{Binding SearchButtonText, UpdateSourceTrigger=PropertyChanged}"
                        Width="80" Height="24" 
                        Command="{Binding SearchCommand}"
                        IsEnabled="{Binding IsBusy, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource InverseBooleanConverter}}"/>

                        <!--<ProgressBar Grid.Column="3"  x:Name="AnimatedProgressBar"
                             Width="150" Height="20"
                             Margin="10,0,0,0"
                             VerticalAlignment="Center"
                             HorizontalAlignment="Center"
                             Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibility}}"
                             Minimum="0" Maximum="100" Value="50"
                             />-->

                        <TextBlock Grid.Column="3"
                           Margin="10,3,0,0"
                           Text="{x:Static resx:Strings.Label_F5_Shortcut}" 
                           FontStyle="Normal" 
                           Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                           TextWrapping="Wrap"/>
                    </Grid>

                    <!-- Services DataGrid -->
                    <DataGrid 
                        x:Name="ServicesDataGrid"
                        Grid.Row="1"
                        ItemsSource="{Binding ServicesView}"
                        VirtualizingStackPanel.IsVirtualizing="True"
                        VirtualizingStackPanel.VirtualizationMode="Recycling"
                        VirtualizingPanel.IsVirtualizingWhenGrouping="True"
                        EnableRowVirtualization="True"
                        EnableColumnVirtualization="True"
                        AutoGenerateColumns="False"
                        CanUserAddRows="False"
                        CanUserDeleteRows="False"
                        IsReadOnly="True"
                        SelectionUnit="FullRow"
                        SelectionMode="Extended"
                        RowHeight="32"
                        >
                        <DataGrid.ColumnHeaderStyle>
                            <Style TargetType="DataGridColumnHeader">
                                <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ColumnHeader_PreviewMouseLeftButtonDown"/>
                            </Style>
                        </DataGrid.ColumnHeaderStyle>
                        <DataGrid.RowStyle>
                            <Style TargetType="DataGridRow">
                                <!-- default background -->
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>

                                <EventSetter Event="MouseDoubleClick" Handler="DataGridRow_MouseDoubleClick"/>

                                <Style.Triggers>
                                    <!-- change background when IsChecked is true -->
                                    <DataTrigger Binding="{Binding IsChecked}" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.RowStyle>

                        <DataGrid.CellStyle>
                            <Style TargetType="DataGridCell">
                                <EventSetter Event="PreviewMouseLeftButtonDown" Handler="CheckBoxCell_PreviewMouseLeftButtonDown"/>
                            </Style>
                        </DataGrid.CellStyle>

                        <DataGrid.Columns>
                            <DataGridTemplateColumn Width="32">
                                <!--Check all checkbox in header-->
                                <DataGridTemplateColumn.Header>
                                    <CheckBox IsThreeState="True"
                                              IsChecked="{Binding DataContext.SelectAll, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                     />
                                </DataGridTemplateColumn.Header>

                                <!--Row checkbox-->
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <!--Name-->
                            <DataGridTemplateColumn Header="{x:Static resx:Strings.Column_Name}" Width="2*">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Name}"
                                                   ToolTip="{Binding Name}"
                                                   VerticalAlignment="Top"
                                                   TextWrapping="NoWrap"
                                                   TextTrimming="CharacterEllipsis"
                                                   />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <!--Description-->
                            <DataGridTemplateColumn Header="{x:Static resx:Strings.Column_Description}" Width="3*">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Description}"
                                                   ToolTip="{Binding Description}"
                                                   VerticalAlignment="Top"
                                                   TextWrapping="NoWrap"
                                                   TextTrimming="CharacterEllipsis"
                                                   />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <!--Status-->
                            <DataGridTextColumn Header="{x:Static resx:Strings.Column_Status}" Binding="{Binding Status, Converter={StaticResource StatusConverter}}" Width="*"/>
                            <!--Startup Type-->
                            <DataGridTextColumn Header="{x:Static resx:Strings.Column_StartupType}" Binding="{Binding StartupType, Converter={StaticResource StartupTypeConverter}}" Width="*"/>
                            <!--User Session-->
                            <DataGridTextColumn Header="{x:Static resx:Strings.Column_UserSession}" Binding="{Binding UserSession}" Width="*"/>

                            <!-- Actions -->
                            <DataGridTemplateColumn Width="200">
                                <!--Bulk actions-->
                                <DataGridTemplateColumn.Header>
                                    <Grid Width="186">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <!-- Start Selected -->
                                            <Button ToolTip="{x:Static resx:Strings.Button_StartSelected}" 
                                            Command="{Binding DataContext.StartSelectedCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            IsEnabled="{Binding DataContext.HasSelectedServices, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            Content="▶" Width="24" Height="24" Margin="2,0,0,0"/>

                                            <!-- Stop Selected -->
                                            <Button ToolTip="{x:Static resx:Strings.Button_StopSelected}" 
                                            Command="{Binding DataContext.StopSelectedCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            IsEnabled="{Binding DataContext.HasSelectedServices, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            Content="■" Width="24" Height="24" Margin="2,0,0,0"/>

                                            <!-- Restart Selected -->
                                            <Button ToolTip="{x:Static resx:Strings.Button_RestartSelected}" 
                                            Command="{Binding DataContext.RestartSelectedCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            IsEnabled="{Binding DataContext.HasSelectedServices, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            Content="⟳" Width="24" Height="24" Margin="2,0,0,0"/>

                                            <Button Content="⋮" Width="24" Height="24" Margin="5,0,0,0" Visibility="Hidden"
                                                    IsEnabled="{Binding DataContext.HasSelectedServices, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                            />
                                        </StackPanel>
                                    </Grid>
                                </DataGridTemplateColumn.Header>

                                <!--Row actions-->
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Tag="{Binding DataContext, ElementName=This}">

                                            <!-- Start, Stop, Restart buttons -->
                                            <Button ToolTip="{x:Static resx:Strings.Button_Start}" 
                                            Command="{Binding StartCommand}"
                                            CommandParameter="{Binding}" 
                                            Content="▶" Width="24" Height="24" Margin="2,0,0,0"
                                            IsEnabled="{Binding IsInstalled}"
                                            PreviewMouseLeftButtonDown="ActionButton_PreviewMouseLeftButtonDown"/>


                                            <Button ToolTip="{x:Static resx:Strings.Button_Stop}" 
                                            Command="{Binding StopCommand}"
                                            CommandParameter="{Binding}" 
                                            Content="■" Width="24" Height="24" Margin="2,0,0,0" 
                                            IsEnabled="{Binding IsInstalled}"
                                            PreviewMouseLeftButtonDown="ActionButton_PreviewMouseLeftButtonDown"/>

                                            <Button ToolTip="{x:Static resx:Strings.Button_Restart}" 
                                            Command="{Binding RestartCommand}"
                                            CommandParameter="{Binding}" 
                                            Content="⟳" Width="24" Height="24" Margin="2,0,0,0" 
                                            IsEnabled="{Binding IsInstalled}"
                                            PreviewMouseLeftButtonDown="ActionButton_PreviewMouseLeftButtonDown"/>

                                            <!-- Menu button for other actions -->
                                            <Button Content="⋮" Width="24" Height="24" Margin="5,0,0,0"
                                            PreviewMouseLeftButtonDown="MenuButton_PreviewMouseLeftButtonDown">
                                                <Button.ContextMenu>
                                                    <ContextMenu>

                                                        <MenuItem Header="{x:Static resx:Strings.Button_Install}"
                                                      Command="{Binding InstallCommand}"
                                                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />

                                                        <MenuItem Header="{x:Static resx:Strings.Button_Uninstall}" 
                                                      Command="{Binding UninstallCommand}"
                                                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                                      IsEnabled="{Binding PlacementTarget.DataContext.IsInstalled, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />

                                                        <MenuItem Header="{x:Static resx:Strings.Button_Remove}" 
                                                      Command="{Binding RemoveCommand}"
                                                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                                      IsEnabled="{Binding PlacementTarget.DataContext.IsInstalled, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource InverseBooleanConverter}}" />

                                                        <MenuItem Header="{x:Static resx:Strings.Button_Config}" 
                                                    Command="{Binding ConfigureCommand}"
                                                    CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" 
                                                    IsEnabled="{Binding PlacementTarget.DataContext.IsConfigurationAppAvailable, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />

                                                        <MenuItem Header="{x:Static resx:Strings.Button_ExportXML}" 
                                                    Command="{Binding ExportXmlCommand}"
                                                    CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />

                                                        <MenuItem Header="{x:Static resx:Strings.Button_ExportJSON}" 
                                                    Command="{Binding ExportJsonCommand}"
                                                    CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />

                                                    </ContextMenu>
                                                </Button.ContextMenu>
                                            </Button>




                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                        </DataGrid.Columns>

                    </DataGrid>

                    <TextBlock Grid.Row="2"
                       Margin="0,5,0,0"
                       Text="{Binding FooterText}"
                       Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                       FontSize="12"
                       TextWrapping="Wrap"
                       HorizontalAlignment="Left"/>
                </Grid>
            </TabItem>

            <!--Logs Tab-->
            <TabItem x:Name="LogsTab" Header="{x:Static resx:Strings.Label_LogsTab}">
                <views:LogsView />
            </TabItem>

        </TabControl>
    </DockPanel>

</Window>

; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Servy"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Akram El Assas"
#define MyAppURL "https://servy-win.github.io/"
#define MyAppExeName "Servy.exe"

[Setup]
PrivilegesRequired=admin
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{8343B121-BE1C-463F-AA5B-FD237DD2F8D0}
SetupMutex=SetupMutex{#SetupSetting("AppId")}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
DisableProgramGroupPage=yes
LicenseFile=..\LICENSE.txt
OutputDir=.
OutputBaseFilename=servy-{#MyAppVersion}-net48-x64-installer
SetupIconFile=..\src\Servy\servy.ico
Compression=lzma
SolidCompression=yes
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
WizardStyle=modern

[Messages]
SetupAppRunningError=Setup has detected that %1 is currently running.%n%nPlease close all instances of it now, then click OK to continue, or Cancel to exit.

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\src\Servy\bin\Release\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\src\Servy\bin\Release\Resources\*"; DestDir: "{app}\Resources"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\src\Servy\bin\Release\*.dll"; DestDir: "{app}"; Flags: ignoreversion

; cli
Source: "..\src\Servy.CLI\bin\Release\Servy.CLI.exe"; DestDir: "{app}\cli"; DestName:"servy-cli.exe"; Flags: ignoreversion
Source: "..\src\Servy.CLI\bin\Release\Resources\*"; DestDir: "{app}\cli\Resources"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\src\Servy.CLI\bin\Release\*.dll"; DestDir: "{app}\cli"; Flags: ignoreversion

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

; [Run]
; Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallRun]
Filename: "taskkill"; Parameters: "/im ""{#MyAppExeName}"" /t /f"; Flags: runhidden waituntilterminated; RunOnceId: StopApp

[UninstallDelete]
Type: dirifempty; Name: "{app}\cli"
Type: filesandordirs; Name: "{app}\cli"

[Code]
function GetUninstallString(): String;
var
  sUnInstPath, sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';

  if not RegQueryStringValue(HKLM64, sUnInstPath, 'UninstallString', sUnInstallString) then
  begin
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  end;

  if sUnInstallString = '' then
  begin
    sUnInstPath := ExpandConstant('SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');

    if not RegQueryStringValue(HKLM32, sUnInstPath, 'UninstallString', sUnInstallString) then
    begin
      RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
    end;
  end;

  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function BoolToStr(Value: Boolean): String; 
begin
  if Value then 
  begin
    Result := 'True';
  end 
  else
  begin
    Result := 'False';
  end;
end;

function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
  Result := 0;
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then
  begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then 
    begin
      Result := 3;
    end 
    else
    begin
      Result := 2;
    end;
  end
  else
  begin
    Result := 1;
  end;
  
  Log('UnInstallOldVersion.Result = ' + IntToStr(Result));
end;

function GetInstalledVersion(): String;
var
  sUnInstPath, sVersionString: String;
begin
  sVersionString := ''
  sUnInstPath := ExpandConstant('SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  
  if not RegQueryStringValue(HKLM64, sUnInstPath, 'DisplayVersion', sVersionString) then
  begin
    RegQueryStringValue(HKCU, sUnInstPath, 'DisplayVersion', sVersionString);
  end;

  if sVersionString = '' then
  begin
    sUnInstPath := ExpandConstant('SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  
    if not RegQueryStringValue(HKLM32, sUnInstPath, 'DisplayVersion', sVersionString) then
    begin
      RegQueryStringValue(HKCU, sUnInstPath, 'DisplayVersion', sVersionString);
    end;
  end;
  
  Result := sVersionString;
end;

function NumericVersion(sVersion: String): Integer;
var
  s1, s2, i: Integer;
  sv : String;
begin
  s1 := 0;
  for i := 1 to Length(sVersion) do
  begin
    sv := sVersion[i];

    if (sv >= '0') and (sv <= '9') then
      begin
        s2 := StrToInt(sv);

        if i = 1 then
        begin
          s2 := s2  * 10;
        end;
        
        s1 := s1 + s2;
      end;
  end;
  
  Result := s1;
end;

function InitializeSetup(): Boolean;
var
  sInstalledVersion, message: String;
  installedVersion, myAppVersion: Integer;
  v: Integer;
begin
  Result := True;
  sInstalledVersion := GetInstalledVersion();
 
  if IsUpgrade() and (sInstalledVersion <> '') then
  begin
    Log('InitializeSetup.InstalledVersion: ' + sInstalledVersion);
    installedVersion := NumericVersion(sInstalledVersion);
    myAppVersion :=  NumericVersion(ExpandConstant('{#MyAppVersion}'));
    message := '';

    if installedVersion < myAppVersion  then 
    begin 
      message := 'An older version of Servy is already installed. Would you like to replace it with this newer version?';
    end 
    else if installedVersion > myAppVersion then
    begin
      message := 'A newer version of Servy is already installed. Would you like to replace it with this older version?';
    end
    else if installedVersion = myAppVersion then
    begin
      message := 'The same version of Servy is already installed. Would you like to repair it?';
    end;

    v := MsgBox(message, mbInformation, MB_YESNO);
    if v <> IDYES then
    begin
      Result := False;
    end;
  end;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  sNeedsRestart : String;
begin
  sNeedsRestart := BoolToStr(NeedsRestart);
  Log('PrepareToInstall(' + sNeedsRestart + ') called');
  if IsUpgrade() then
  begin
    UnInstallOldVersion();
  end;
  Log('PrepareToInstall.ForceDirectories done');
  Result := '';  
end;

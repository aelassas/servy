name: test

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Servy.sln

      - name: Build solution
        run: dotnet build Servy.sln --configuration Release --no-restore

      - name: Run Servy.Core.UnitTests with coverage
        run: |
          dotnet test tests/Servy.Core.UnitTests/Servy.Core.UnitTests.csproj --configuration Release --no-build `
            --collect:"XPlat Code Coverage" `
            --results-directory ./TestResults/Core `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Run Servy.Infrastructure.UnitTests with coverage
        run: |
          dotnet test tests/Servy.Infrastructure.UnitTests/Servy.Infrastructure.UnitTests.csproj --configuration Release --no-build `
            --collect:"XPlat Code Coverage" `
            --results-directory ./TestResults/Infrastructure `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Run remaining unit tests without coverage
        run: |
          dotnet test tests/Servy.Restarter.UnitTests/Servy.Restarter.UnitTests.csproj --configuration Release --no-build
          dotnet test tests/Servy.Service.UnitTests/Servy.Service.UnitTests.csproj --configuration Release --no-build
          dotnet test tests/Servy.UnitTests/Servy.UnitTests.csproj --configuration Release --no-build
          dotnet test tests/Servy.CLI.UnitTests/Servy.CLI.UnitTests.csproj --configuration Release --no-build

      - name: Merge and normalize coverage paths (PowerShell)
        shell: pwsh
        run: |
          $fixedDir = "TestResults\fixed"
          if (-Not (Test-Path $fixedDir)) { New-Item -ItemType Directory -Path $fixedDir | Out-Null }

          $coverageFiles = Get-ChildItem -Path TestResults -Recurse -Filter "coverage.cobertura.xml"
          if ($coverageFiles.Count -eq 0) { Write-Error "No coverage files found"; exit 1 }

          # Merge coverage files using reportgenerator
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.*
          reportgenerator -reports:$($coverageFiles -join ";") -targetdir:$fixedDir -reporttypes:Cobertura

          # Normalize filename paths for both Core and Infrastructure
          $mergedFile = Join-Path $fixedDir "Cobertura.xml"
          $content = Get-Content $mergedFile -Raw
          $content = [regex]::Replace($content, 'filename="([^"]*)"', {
              param($match)
              $origPath = $match.Groups[1].Value -replace '\\', '/'
              if ($origPath -match 'src/Servy\.Core/(.*)') {
                  return "filename=`"src/Servy.Core/$($matches[1])`""
              }
              elseif ($origPath -match 'src/Servy\.Infrastructure/(.*)') {
                  return "filename=`"src/Servy.Infrastructure/$($matches[1])`""
              }
              else {
                  return "filename=`"$origPath`""
              }
          })
          $normalizedFile = Join-Path $fixedDir "coverage.cobertura.xml"
          $content | Set-Content $normalizedFile

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: TestResults/fixed/coverage.cobertura.xml
          flags: unittests
          name: codecov-coverage-report
          fail_ci_if_error: false
          verbose: false

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: TestResults/fixed/coverage.cobertura.xml
          format: cobertura
          fail-on-error: false
          debug: false

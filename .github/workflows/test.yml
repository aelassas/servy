name: test

on:
  push:
    branches:
      - net48

jobs:
  test:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet packages
        run: nuget restore Servy.sln

      - name: Build solution
        run: msbuild Servy.sln /p:Configuration=Debug

      - name: Install Coverlet global tool
        run: dotnet tool install --global coverlet.console

      - name: Add dotnet tools to PATH
        run: echo "$env:PATH += ';$env:USERPROFILE\.dotnet\tools'"  
        shell: pwsh

      - name: Run Servy.Core.UnitTests with coverage
        run: |
          coverlet.exe "tests\Servy.Core.UnitTests\bin\Debug\Servy.Core.UnitTests.dll" `
            --target "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
            --targetargs "tests\Servy.Core.UnitTests\bin\Debug\Servy.Core.UnitTests.dll" `
            --output "Core\coverage.cobertura.xml" `
            --format "cobertura" `
            --include-directory "${{ github.workspace }}"
        shell: pwsh

      # - name: Dump Core\coverage.cobertura.xml
      #   run: cat Core\coverage.cobertura.xml 

      - name: Run Servy.Infrastructure.UnitTests with coverage
        run: |
          coverlet.exe "tests\Servy.Infrastructure.UnitTests\bin\Debug\Servy.Infrastructure.UnitTests.dll" `
            --target "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
            --targetargs "tests\Servy.Infrastructure.UnitTests\bin\Debug\Servy.Infrastructure.UnitTests.dll" `
            --output "Infrastructure\coverage.cobertura.xml" `
            --format "cobertura" `
            --include-directory "${{ github.workspace }}"
        shell: pwsh

      # - name: Dump Infrastructure\coverage.cobertura.xml
      #   run: cat Infrastructure\coverage.cobertura.xml 

      # - name: Merge coverage reports
      #   run: |
      #     coverlet.exe merge Core/coverage.cobertura.xml Infrastructure/coverage.cobertura.xml --recursive --output merged.cobertura.xml --format cobertura 

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Merge coverage reports
        run: |
            reportgenerator `
                "-reports:Core/coverage.cobertura.xml;Infrastructure/coverage.cobertura.xml" `
                "-targetdir:CoverageMerged" `
                "-reporttypes:Cobertura"

      - name: Normalize coverage paths (PowerShell)
        shell: pwsh
        run: |
          $fixedDir = "CoverageMerged\fixed"
          if (-Not (Test-Path $fixedDir)) { New-Item -ItemType Directory -Path $fixedDir | Out-Null }
        
          # Normalize filename paths for both Core and Infrastructure
          $mergedFile = "CoverageMerged\Cobertura.xml"
          $content = Get-Content $mergedFile -Raw
          $content = [regex]::Replace($content, 'filename="([^"]*)"', {
              param($match)
              $origPath = $match.Groups[1].Value -replace '\\', '/'
              if ($origPath -match 'src/Servy\.Core/(.*)') {
                  return "filename=`"src/Servy.Core/$($matches[1])`""
              }
              elseif ($origPath -match 'src/Servy\.Infrastructure/(.*)') {
                  return "filename=`"src/Servy.Infrastructure/$($matches[1])`""
              }
              else {
                  return "filename=`"$origPath`""
              }
          })
          $normalizedFile = Join-Path $fixedDir "coverage.cobertura.xml"
          $content | Set-Content $normalizedFile

      - name: Run other Unit Tests (no coverage)
        run: |
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" `
            "tests\Servy.Restarter.UnitTests\bin\Debug\Servy.Restarter.UnitTests.dll" `
            "tests\Servy.Service.UnitTests\bin\Debug\Servy.Service.UnitTests.dll" `
            "tests\Servy.UnitTests\bin\Debug\Servy.UnitTests.dll" `
            "tests\Servy.CLI.UnitTests\bin\Debug\Servy.CLI.UnitTests.dll"
        shell: pwsh

      - name: Upload coverage to Codecov
        id: codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  
          # files: Core/coverage.cobertura.xml,Infrastructure/coverage.cobertura.xml
          # merge: true
          # files: merged.cobertura.xml
          files: CoverageMerged/Cobertura.xml
          flags: unittests
          fail_ci_if_error: false
          verbose: false

      - name: Notify Codecov Status in case of failure
        if: steps.codecov.outcome != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'codecov-tracking',
              state: 'closed'
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'Codecov upload failed in workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
              });
            }
       

      - name: Upload coverage to Coveralls
        id: coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: CoverageMerged/fixed/coverage.cobertura.xml
          format: cobertura
          fail-on-error: false
          debug: false
        env:
            COVERALLS_GIT_BRANCH: ${{ github.head_ref || github.ref_name }}

      - name: Notify Coveralls Status in case of failure
        if: steps.coveralls.outcome != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'coveralls-tracking',
              state: 'closed'
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'Coveralls upload failed in workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
              });
            }

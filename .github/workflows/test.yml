name: test

# Coverage Strategy:
# - Include: Servy.Core (core logic, high testability)
# - Exclude:
#     • Servy (GUI - low testability)
#     • Servy.CLI (CLI - low testability)
#     • Servy.Service (Windows Service - mocked extensively, limited practical coverage)
#     • Servy.Restarter (wrapper utility with minimal logic)

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Servy.sln

      - name: Build solution
        run: dotnet build Servy.sln --configuration Release --no-restore

      - name: Run Servy.Core.UnitTests with coverage
        run: |
          dotnet test tests/Servy.Core.UnitTests/Servy.Core.UnitTests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults/Core -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Run Servy.Restarter.UnitTests without coverage
        run: dotnet test tests/Servy.Restarter.UnitTests/Servy.Restarter.UnitTests.csproj --configuration Release --no-build

      - name: Run Servy.Service.UnitTests without coverage
        run: dotnet test tests/Servy.Service.UnitTests/Servy.Service.UnitTests.csproj --configuration Release --no-build

      - name: Run Servy.UnitTests without coverage
        run: dotnet test tests/Servy.UnitTests/Servy.UnitTests.csproj --configuration Release --no-build

      - name: Run Servy.CLI.UnitTests without coverage
        run: dotnet test tests/Servy.CLI.UnitTests/Servy.CLI.UnitTests.csproj --configuration Release --no-build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: TestResults/Core/**/coverage.cobertura.xml
          flags: unittests
          name: codecov-coverage-report
          fail_ci_if_error: true

      - name: Normalize coverage paths and copy coverage file (PowerShell)
        shell: pwsh
        run: |
          $fixedDir = "TestResults\fixed"
          if (-Not (Test-Path $fixedDir)) { New-Item -ItemType Directory -Path $fixedDir | Out-Null }
          $coverageFiles = Get-ChildItem -Path TestResults\Core\*\coverage.cobertura.xml
          if ($coverageFiles.Count -eq 0) { Write-Error "No coverage files found"; exit 1 }
          $content = Get-Content $coverageFiles[0].FullName -Raw

          # Replace duplicated src\src with src
          $content = $content -replace 'src\\src', 'src'

          # Replace all backslashes with forward slashes (including inside <source> and filename attributes)
          $content = $content -replace '\\', '/'

          # Remove all text before first 'src/' in <source> tag(s)
          $content = [regex]::Replace($content, '<source>.*?(src/Servy\.Core/.*?)<\/source>', '<source>$1</source>')

          # Fix mixed slashes in filename attributes and remove leading slash if any
          $content = $content -replace 'filename="[^"]*"', { param($m) $m.Value -replace '\\', '/' -replace 'filename="/', 'filename="' }

          $fixedPath = Join-Path $fixedDir "coverage.cobertura.xml"
          $content | Set-Content $fixedPath

      - name: Show normalized coverage report content
        run: |
            echo "----- coverage.cobertura.xml -----"
            cat TestResults/fixed/coverage.cobertura.xml

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: TestResults/fixed/coverage.cobertura.xml
          format: cobertura
          base-path: src/Servy.Core
          fail-on-error: true

name: scoop

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.1)'
        required: false

permissions:
  contents: write   # allows pushing commits back

jobs:
  scoop:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Set version vars
        shell: pwsh
        env:
          MANUAL_TAG: ${{ github.event.inputs.tag }} # pass input to env
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          if ($env:MANUAL_TAG -and $env:MANUAL_TAG -ne '') {
              $tag = $env:MANUAL_TAG                       # Manual trigger input
          } elseif ($env:RELEASE_TAG -and $env:RELEASE_TAG -ne '') {
              $tag = $env:RELEASE_TAG                      # Release trigger
          } elseif ($env:GITHUB_REF_NAME -and $env:GITHUB_REF_NAME -ne '') {
              $tag = $env:GITHUB_REF_NAME                  # Fallback for tag push
          } else {
              Write-Error "No tag provided. Set tag via workflow_dispatch input or trigger a release."
              exit 1
          }

          $version = $tag.TrimStart("v")         # e.g. v1.1 -> 1.1
          Write-Host "Using tag: $tag"
          Write-Host "Using version: $version"

          "TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download installer
        shell: pwsh
        run: |
          $InstallerDir = "$env:GITHUB_WORKSPACE\_installer"
          New-Item -ItemType Directory -Force -Path $InstallerDir
          $url = "https://github.com/aelassas/servy/releases/download/${env:TAG}/servy-${env:VERSION}-net8.0-x64-installer.exe"
          Write-Host "Downloading Servy installer from $url"
          Invoke-WebRequest -Uri $url -OutFile "$InstallerDir\servy-${env:VERSION}-net8.0-x64-installer.exe"

      - name: Compute SHA256
        shell: pwsh
        run: |
          $InstallerDir = "$env:GITHUB_WORKSPACE\_installer"
          $InstallerPath = "$InstallerDir\servy-${env:VERSION}-net8.0-x64-installer.exe"
          $HASH = Get-FileHash $InstallerPath -Algorithm SHA256
          $LOWER = $HASH.Hash.ToLower()
          "HASH=$LOWER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Remove-Item $InstallerPath

      - name: Update servy.json in scoop-bucket and push
        shell: pwsh
        env:
          HASH: ${{ env.HASH }}
          VERSION: ${{ env.VERSION }}
        run: |
          # Clone scoop-bucket into a folder
          git clone https://x-access-token:${{ secrets.PAT }}@github.com/aelassas/scoop-bucket.git scoop-bucket
          
          # Change to the folder where servy.json is
          Set-Location scoop-bucket
          
          # Path to the manifest inside the cloned repo
          $manifestPath = "servy.json"   # adjust if servy.json is elsewhere
          
          # Load and update JSON
          $json = Get-Content $manifestPath -Raw | ConvertFrom-Json
          $json.version = $env:VERSION
          $json.architecture.'64bit'.url = "https://github.com/aelassas/servy/releases/download/v$env:VERSION/servy-$env:VERSION-net8.0-x64-installer.exe"
          $json.architecture.'64bit'.hash = $env:HASH
          
          # Save formatted JSON
          $json | ConvertTo-Json -Depth 10 | Out-File $manifestPath -Encoding UTF8
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ((git status --porcelain) -ne '') {
            git add $manifestPath
            git commit -m "chore: update Servy Scoop manifest to version $env:VERSION"
            git push origin main
          } else {
            Write-Host "No changes to commit"
          }

      - name: Update servy.json in ScoopInstaller/Extras and prepare PR branch
        shell: pwsh
        run: |
          git clone https://x-access-token:${{ secrets.PAT }}@github.com/aelassas/Extras.git extras
          Set-Location extras

          # Make sure your fork's main is up-to-date
          git fetch origin
          git checkout main
          git reset --hard origin/master
          
          # Create or reset PR branch
          if (git show-ref --verify --quiet "refs/heads/update-servy-$env:VERSION") {
              git branch -D "update-servy-$env:VERSION"
          }
          git checkout -b "update-servy-$env:VERSION"
          
          $manifestPath = "bucket/servy.json"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if (-Not (Test-Path $manifestPath)) {
              # Create new manifest
              $jsonObj = [PSCustomObject]@{
                  version     = $env:VERSION
                  description = "Servy lets you run any app as a native Windows service with full control over working directory, startup type, process priority, logging, health checks, pre-launch scripts and parameters."
                  notes       = "sercy-cli is available in PATH after installation. For Servy and Servy Manager, you need to open them from Start Menu. For more info, visit https://servy-win.github.io"
                  homepage    = "https://servy-win.github.io"
                  license     = "MIT"
                  architecture = @{
                      '64bit' = @{
                          url  = "https://github.com/aelassas/servy/releases/download/v$env:VERSION/servy-$env:VERSION-net8.0-x64-installer.exe"
                          hash = $env:HASH
                      }
                  }
                  innosetup  = $true
                  bin        = "servy-cli.exe"
                  checkver   = @{
                      github = "https://github.com/aelassas/servy"
                  }
                  autoupdate = @{
                      architecture = @{
                          '64bit' = @{
                              url = "https://github.com/aelassas/servy/releases/download/v`$version/servy-`$version-net8.0-x64-installer.exe"
                          }
                      }
                  }
              }


              $jsonPath = Join-Path (Get-Location) "bucket/servy.json"

              # Convert object to JSON (2-space indent)
              $jsonString = $jsonObj | ConvertTo-Json -Depth 10 -Compress:$false
          
              # Only process if conversion succeeded
              if (-not [string]::IsNullOrEmpty($jsonString)) {
          
                  # Replace 2-space indentation with 4-space
                  $jsonString = ($jsonString -split "`r?`n" | ForEach-Object {
                      $_ -replace "^(  +)", { " " * ($matches[1].Length * 2) }
                  }) -join "`n"
          
                  # Trim trailing newlines and append exactly one
                  $jsonString = $jsonString.TrimEnd("`r", "`n") + "`n"
          
                  # Ensure folder exists
                  $folder = Split-Path $manifestPath -Parent
                  if (-not (Test-Path $folder)) { New-Item -Path $folder -ItemType Directory -Force | Out-Null }
          
                  # Write to file
                  [System.IO.File]::WriteAllText($manifestPath, $jsonString, [System.Text.Encoding]::UTF8)
              } else {
                  throw "`$jsonObj is null or empty; cannot write JSON"
              }
          

              # Trim any trailing newlines and append exactly one
              $jsonString = $jsonString.TrimEnd("`r", "`n") + "`n"

              # Write to file
              [System.IO.File]::WriteAllText($jsonPath, $jsonString, [System.Text.Encoding]::UTF8)

              git add $manifestPath
              git commit -m "servy: Update to version $env:VERSION"
          } else {
              # Update existing manifest
              $json = Get-Content $manifestPath -Raw | ConvertFrom-Json
              $json.version = $env:VERSION
              $json.architecture.'64bit'.url = "https://github.com/aelassas/servy/releases/download/v$env:VERSION/servy-$env:VERSION-net8.0-x64-installer.exe"
              $json.architecture.'64bit'.hash = $env:HASH
              $json | ConvertTo-Json -Depth 10 -Compress:$false | Out-File $manifestPath -Encoding UTF8
          
              if ((git status --porcelain) -ne '') {
                  git add $manifestPath
                  git commit -m "servy: Update to version $env:VERSION"
              }
          }
          
          # Force push to fork (overwrite old branch if exists)
          git push origin "update-servy-$env:VERSION" --force
        
      - name: Check Chocolatey version
        shell: pwsh
        run: choco --version
        
      - name: Open Pull Request in ScoopInstaller/Extras
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          Set-Location extras
          
          # Check if the branch exists on remote
          $branchExists = git ls-remote --heads origin "update-servy-$env:VERSION"
          
          if ($branchExists) {
              # Create PR
              gh pr create `
                --title "servy: Add version $env:VERSION" `
                --body "Add Servy version $env:VERSION." `
                --base master `
                --head "aelassas:update-servy-$env:VERSION" `
                --repo ScoopInstaller/Extras `
                --fill
          } else {
              Write-Host "PR branch does not exist on remote, skipping PR creation."
          }
          
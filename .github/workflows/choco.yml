name: choco

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.1)'
        required: false

jobs:
  choco:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set version vars
        shell: pwsh
        env:
          MANUAL_TAG: ${{ github.event.inputs.tag }} # pass input to env
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          if ($env:MANUAL_TAG -and $env:MANUAL_TAG -ne '') {
              $tag = $env:MANUAL_TAG                       # Manual trigger input
          } elseif ($env:RELEASE_TAG -and $env:RELEASE_TAG -ne '') {
              $tag = $env:RELEASE_TAG                      # Release trigger
          } elseif ($env:GITHUB_REF_NAME -and $env:GITHUB_REF_NAME -ne '') {
              $tag = $env:GITHUB_REF_NAME                  # Fallback for tag push
          } else {
              Write-Error "No tag provided. Set tag via workflow_dispatch input or trigger a release."
              exit 1
          }

          $version = $tag.TrimStart("v")         # e.g. v1.1 -> 1.1
          Write-Host "Using tag: $tag"
          Write-Host "Using version: $version"

          "TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download installer
        shell: pwsh
        run: |
          $url = "https://github.com/aelassas/servy/releases/download/${env:TAG}/servy-${env:VERSION}-net8.0-x64-installer.exe"
          Write-Host "Downloading Servy installer from $url"
          Invoke-WebRequest -Uri $url -OutFile "servy-${env:VERSION}-net8.0-x64-installer.exe"

      - name: Compute SHA256
        shell: pwsh
        run: |
          $HASH = Get-FileHash "servy-${env:VERSION}-net8.0-x64-installer.exe" -Algorithm SHA256
          $UPPER = $HASH.Hash.ToUpper()
          "HASH=$UPPER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Update nuspec version and release notes
        shell: pwsh
        run: |
          $file = "setup/choco/servy/servy.nuspec"
          $content = Get-Content $file -Raw

          $content = $content -replace '<version>.*</version>', "<version>${env:VERSION}.0</version>"
          $content = $content -replace '<releaseNotes>.*</releaseNotes>', "<releaseNotes>Release for version ${env:VERSION}.0. See https://github.com/aelassas/servy/releases/tag/v${env:VERSION}</releaseNotes>"

          # Write without adding extra newline
          [System.IO.File]::WriteAllText($file, $content)

      - name: Update chocolateyinstall.ps1
        shell: pwsh
        run: |
          $file = "setup/choco/servy/tools/chocolateyinstall.ps1"
          $content = Get-Content $file -Raw

          # Build replacement strings
          $urlReplacement = "`$url64 = 'https://github.com/aelassas/servy/releases/download/$($env:TAG)/servy-$($env:VERSION)-net8.0-x64-installer.exe'"
          $checksumReplacement = "`$checksum64 = '$($env:HASH)'"

          Write-Host "URL: $urlReplacement"
          Write-Host "HASH: $checksumReplacement"

          # Use [regex]::Replace to handle $ literally
          $content = [regex]::Replace($content, [regex]::Escape('$url64') + '\s*=.*', $urlReplacement)
          $content = [regex]::Replace($content, [regex]::Escape('$checksum64') + '\s*=.*', $checksumReplacement)

          # Write content back without extra newline
          [System.IO.File]::WriteAllText($file, $content)

      - name: Commit updated files
        shell: pwsh
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin main
          git checkout main
          git pull origin main
          git add setup/choco/servy/*
          git commit -m "chore(choco): update package for version ${env:VERSION}" -a || Write-Host "No changes to commit"
          git push origin main

      - name: Check Chocolatey version
        shell: pwsh
        run: choco --version

      - name: Set Chocolatey API key
        shell: pwsh
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          choco apikey --key="$env:CHOCOLATEY_API_KEY" --source="https://push.chocolatey.org/"

      - name: Pack Chocolatey package
        shell: pwsh
        run: choco pack setup/choco/servy/servy.nuspec --out setup/choco/servy

      - name: Push Chocolatey package
        shell: pwsh
        run: choco push setup/choco/servy/servy.$env:VERSION.0.nupkg --source https://push.chocolatey.org/
